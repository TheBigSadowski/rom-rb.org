<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ROM Blog</title>
  <subtitle>News from the ROM team and more</subtitle>
  <id>http://rom-rb.org/blog/</id>
  <link href="http://rom-rb.org"/>
  <link href="http://rom-rb.org/feed.xml" rel="self"/>
  <updated>2016-01-06T01:00:00+01:00</updated>
  <author>
    <name>ROM team</name>
  </author>
  <entry>
    <title>ROM 1.0.0 Released</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2016/01/06/rom-1-0-0-released"/>
    <id>http://rom-rb.org/blog/2016/01/06/rom-1-0-0-released</id>
    <published>2016-01-06T01:00:00+01:00</published>
    <updated>2016-01-06T01:00:00+01:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>We&rsquo;re happy to announce the first stable release of <code>rom</code> core gem. It took us
a little over a year to discover and implement the core interfaces that allow
building rom adapters and extensions. Since no significant changes had to be made
for many months and there are no outstanding issues - <code>rom 1.0.0</code> is now available.</p>

<p>Following gems have been updated and released:</p>

<ul>
<li>rom 1.0.0 <a href="https://github.com/rom-rb/rom/blob/master/CHANGELOG.md#v100-2016-01-06">CHANGELOG</a></li>
<li>rom-support 1.0.0 <a href="https://github.com/rom-rb/rom-support/blob/master/CHANGELOG.md#v100-2016-01-06">CHANGELOG</a></li>
<li>rom-mapper 0.3.0 <a href="https://github.com/rom-rb/rom-mapper/blob/master/CHANGELOG.md#v030-2016-01-06">CHANGELOG</a></li>
<li>rom-model 0.2.0 <a href="https://github.com/rom-rb/rom-model/blob/master/CHANGELOG.md#v020-2016-01-06">CHANGELOG</a></li>
<li>rom-rails 0.6.0 <a href="https://github.com/rom-rb/rom-rails/blob/master/CHANGELOG.md#v060-2016-01-06">CHANGELOG</a></li>
<li>rom-sql 0.7.0 <a href="https://github.com/rom-rb/rom-sql/blob/master/CHANGELOG.md#v070-2016-01-06">CHANGELOG</a></li>
<li>rom-repository 0.2.0 <a href="https://github.com/rom-rb/rom-repository/blob/master/CHANGELOG.md#v020-2016-01-06">CHANGELOG</a></li>
</ul>

<h2 id="what-does-this-release-mean">What Does This Release Mean?</h2>

<p>This is a huge milestone even though it doesn&rsquo;t change a lot from the usage point
of view. Having a stable set of core interfaces will make it easier to develop
adapters and extensions and get them to a stable state, too. Up until now every
ROM release was huge, including lots of changes in many places, multiple gems
were released at the same time. These kind of releases are hard to manage and it&rsquo;s
also difficult to provide information about individual changes and improvements
without overwhelming current users and potential new users.</p>

<p>Now, with the stable rom core, we can focus on individual adapters and extensions.
Release them separately, and probably more often. It will also make it simpler
to explain and document changes and improvements.</p>

<h2 id="what-happens-next">What Happens Next?</h2>

<p>First of all, we&rsquo;re working on updating <a href="http://rom-rb.org">rom-rb.org</a>, which will
have <a href="https://github.com/rom-rb/rom-rb.org/issues/111">a new design</a> and content -
as the documentation is currently being rewritten. The initial set of docs was too
focused on shared, lower-level APIs, mixed with adapter-specific APIs, which was
confusing. New docs will focus on high-level guides specific to individual adapters,
so it will be much easier to understand how to use ROM in a specific context.</p>

<p>As far as individual gems go, here&rsquo;s a rough plan:</p>

<ul>
<li><a href="https://github.com/rom-rb/rom">rom</a>

<ul>
<li>Relation schema support that can be used by commands and for migrations</li>
<li>Shared database migration interfaces for all adapters</li>
</ul></li>
<li><a href="https://github.com/rom-rb/rom-sql">rom-sql</a>

<ul>
<li>Improvements in the query DSL, especially when it comes to building
complex joins. We&rsquo;re still using Sequel but that may be changed in the near future.</li>
<li>Support for prepared statements</li>
<li>Built-in types for relation schemas specific to individual databases</li>
</ul></li>
<li><a href="https://github.com/rom-rb/rom-repository">rom-repository</a>

<ul>
<li>Support for commands</li>
<li>Setup interface, that would make it simple to quickly configure gateway
connection and fetch data</li>
<li>Support for dry-data structs and values</li>
</ul></li>
<li><a href="https://github.com/rom-rb/rom-model">rom-model</a>

<ul>
<li><code>ActiveModel::Validations</code> will be replaced by <a href="https://github.com/dryrb/dry-validation">dry-validation</a></li>
<li><code>ROM::Model::Attributes</code> will be deprecated in favor of dry-validation schemas</li>
</ul></li>
<li><a href="https://github.com/rom-rb/rom-rails">rom-rails</a>

<ul>
<li>Rewrite on top of <a href="https://github.com/dryrb/dry-component">dry-component</a></li>
<li><code>ROM::Model::Form</code> will be deprecated</li>
</ul></li>
</ul>

<p>Apart from these improvements, there will be smaller clean ups, refactorings and
performance tweaks.</p>

<p>The following adapters are looking for contributors and/or maintainers:</p>

<ul>
<li><a href="https://github.com/rom-rb/rom-rethinkdb">rom-rethinkdb</a></li>
<li><a href="https://github.com/rom-rb/rom-influxdb">rom-influxdb</a></li>
<li><a href="https://github.com/rom-rb/rom-mongo">rom-mongo</a></li>
<li><a href="https://github.com/rom-rb/rom-redis">rom-redis</a></li>
<li><a href="https://github.com/rom-rb/rom-neo4j">rom-neo4j</a></li>
<li><a href="https://github.com/rom-rb/rom-json">rom-json</a></li>
<li><a href="https://github.com/rom-rb/rom-csv">rom-csv</a></li>
<li><a href="https://github.com/rom-rb/rom-git">rom-git</a></li>
<li><a href="https://github.com/rom-rb/rom-http">rom-http</a></li>
<li><a href="https://github.com/rom-rb/rom-event_store">rom-event_store</a></li>
</ul>

<p>Please get in touch if your&rsquo;re interested in helping out :)</p>

<h2 id="towards-rom-2-0-stable-adapters-and-repository">Towards rom 2.0, Stable Adapters and Repository</h2>

<p>Further development of adapters and repository will very likely require changes
in some of the core public APIs. Expect an evolution though, not a revolution.
Some features will be introduced during 1.x.y upgrades, like relation schema, but
any public API change will require a major version bump since rom follows SemVer.
It&rsquo;s probably safe to assume this will happen later this year.</p>

<p><code>rom</code> 2.0.0 will be a base for the first stable releases of individual adapters and
extensions. That&rsquo;s why it is so important to focus on other adapters, not just
<code>rom-sql</code>, to see what kind of improvements are needed and whether it&rsquo;s going to
break any public APIs.</p>

<h2 id="providing-feedback-and-reporting-issues">Providing Feedback And Reporting Issues</h2>

<p>If you have found an issue or you&rsquo;re seeking help, there are number of ways you
can get in touch:</p>

<ul>
<li>Report <a href="https://github.com/rom-rb/rom/issues">an issue</a> on GitHub, preferably
in the issue tracker for the specific rom project. If you&rsquo;re not sure which one
it is - don&rsquo;t worry and report it in the main rom issue tracker</li>
<li>Ask for help in <a href="https://gitter.im/rom-rb/chat">the gitter channel</a></li>
<li>Post a message <a href="http://discuss.rom-rb.org">on our forum</a></li>
</ul>

<p>If you&rsquo;ve got feedback regarding documentation and/or the website, please report
an issue in <a href="https://github.com/rom-rb/rom-rb.org/issues">the rom-rb.org</a> repo.</p>

<h2 id="thank-you">Thank You!</h2>

<p>I&rsquo;d like to use this opportunity to simply say &ldquo;Thank You!&rdquo; to everybody involved
with the project. Many people have been supporting ROM in various ways, either
by contributing bug fixes, adding features or making huge refactorings. There
are also many people who have been very helpful in the gitter channel, providing
support for others who were trying out ROM.</p>

<p>Really special thanks go to early adopters and contributors:</p>

<ul>
<li><a href="https://github.com/aflatter">Alexander Flatter</a> - for adopting rom very early,
helping with API design, contributing code and supporting users in the channel</li>
<li><a href="https://github.com/nepalez">Andrew Kozin</a> - for helping with rom-mapper, creating
rom-migrator, rom-cassandra and rom-kafka</li>
<li><a href="https://github.com/AMHOL">Andy Holland</a> - for helping with rom core, creating
rom-http and being supportive in the channel</li>
<li><a href="https://github.com/cflipse">Chris Flipse</a> - who helped by providing patches
and helping me with rom-rails and rom-yaml</li>
<li><a href="https://github.com/endash">Christopher Swasey</a> - for his insane effort to refactor
and improve rom setup interfaces</li>
<li><a href="https://github.com/elskwid">Don Morrison</a> - for supporting me in the very early
days of ROM, helping with adapter interface, documentation, rom-rb website and
release announcements</li>
<li><a href="https://github.com/kwando">Hannes Nevalainen</a> - for testing things out early,
providing awesome feedback and contributing to different rom projects</li>
<li><a href="https://github.com/maetl">Mark Rickerby</a> - who built rom-neo4j and helped with
other projects, rom-rb website and release announcements</li>
<li><a href="https://github.com/gotar">Oskar Szrajer</a> - who helped a lot with rom-sql, rom-yesql,
other adapters and patches in multiple rom projects as well as helped promoting
rom at local Ruby meetups AND by providing support in our gitter channel</li>
<li><a href="https://github.com/splattael">Peter Suschlik</a> - for helping with performance
improvements, support libs and helping with PRs. Peter is currently #3 comitter :)</li>
<li><a href="https://github.com/robinetmiller">Robin Miller</a> - for helping with the new
documentation and providing great feedback</li>
</ul>

<p>I&rsquo;m terribly sorry if I missed somebody! Thank you <em>so much</em> for helping with this
enormous effort!</p>

<p>Happy 2016 :)</p>
]]>
    </content>
  </entry>
  <entry>
    <title>ROM 1.0.0 RC Released</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2015/12/28/rom-1-0-0-rc-released"/>
    <id>http://rom-rb.org/blog/2015/12/28/rom-1-0-0-rc-released</id>
    <published>2015-12-28T01:00:00+01:00</published>
    <updated>2015-12-28T01:00:00+01:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>Today the first, and hopefully last, Release Candidate version of ROM 1.0.0 was released. If you&rsquo;re running on beta or older versions now it&rsquo;s a really good moment to upgrade. This release only includes one <a href="https://github.com/rom-rb/rom/issues/311">small bug fix</a>.</p>

<p>For more information please refer to the <a href="/blog/2015/11/24/first-beta-of-rom-1-0-0-has-been-released/">previous announcement</a>.</p>

<p>As part of this release other gems have been upgraded too:</p>

<ul>
<li>rom 1.0.0.rc1</li>
<li>rom-support 1.0.0.rc1</li>
<li>rom-mapper 0.3.0.rc1</li>
<li>rom-model 0.2.0.rc1</li>
<li>rom-rails 0.6.0.rc1</li>
<li>rom-sql 0.7.0.rc1</li>
<li>rom-repository 0.2.0.rc1</li>
</ul>

<p>These are pre-releases which means you need to add them explicitly to your Gemfile. If you&rsquo;re having problem with upgrading <a href="https://github.com/rom-rb/rom/issues">report an issue</a>, ask for help on <a href="https://gitter.im/rom-rb/chat">gitter</a> or post a message on <a href="http://discuss.rom-rb.org">the forum</a>.</p>

<p>The final version should be released on Wednesday, December 30th, unless we find some blocking issues which are hard to fix.</p>
]]>
    </content>
  </entry>
  <entry>
    <title>First Beta of ROM 1.0.0 Has Been Released</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2015/11/24/first-beta-of-rom-1-0-0-has-been-released"/>
    <id>http://rom-rb.org/blog/2015/11/24/first-beta-of-rom-1-0-0-has-been-released</id>
    <published>2015-11-24T01:00:00+01:00</published>
    <updated>2015-11-24T01:00:00+01:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>Exactly a year ago ROM 0.3.0 was released after <a href="http://solnic.eu/2014/10/23/ruby-object-mapper-reboot.html">the reboot of the project was announced</a>, it was a complete rewrite that introduced the new and simplified adapter interface. Since then we&rsquo;ve come a long way, the community has been growing, rom-rb organization on Github has now 28 projects including 16 adapters.</p>

<p>The core API, which also includes adapter interface, is stabilizing. This means we are coming very close to releasing the final version of rom 1.0.0 and today I&rsquo;m very happy to announce that its first beta1 was released. Please notice this is the release of the core rom gem - adapters and other extensions remain unstable (in the sem-ver sense).</p>

<p>To ease testing we also released beta versions of minor upgrades of other rom gems so that you can install them from rubygems rather than relying on github sources. Overall the release includes following updates:</p>

<ul>
<li><a href="https://rubygems.org/gems/rom">rom</a> 1.0.0.beta1 <a href="https://github.com/rom-rb/rom/blob/master/CHANGELOG.md#v100-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-support">rom-support</a> 1.0.0.beta1 <a href="https://github.com/rom-rb/rom-support/blob/master/CHANGELOG.md#v100-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-mapper">rom-mapper</a> 0.3.0.beta1 <a href="https://github.com/rom-rb/rom-mapper/blob/master/CHANGELOG.md#v030-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-repository">rom-repository</a> 0.2.0.beta1 <a href="https://github.com/rom-rb/rom-repository/blob/master/CHANGELOG.md#v020-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-sql">rom-sql</a> 0.7.0.beta1 <a href="https://github.com/rom-rb/rom-sql/blob/master/CHANGELOG.md#v070-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-rails">rom-rails</a> 0.6.0.beta1 <a href="https://github.com/rom-rb/rom-rails/blob/master/CHANGELOG.md#v060-to-be-released">CHANGELOG</a></li>
<li><a href="https://rubygems.org/gems/rom-model">rom-model</a> 0.2.0.beta1 <a href="https://github.com/rom-rb/rom-model/blob/master/CHANGELOG.md#020-to-be-released">CHANGELOG</a></li>
</ul>

<h2 id="changes-in-setup-api">Changes In Setup API</h2>

<p>Setting up ROM has been refactored and specific responsibilites have been broken down into smaller, and explicit, objects. Unfortunately it is a breaking change as <code>ROM.setup</code> method is gone. If you&rsquo;re using ROM with rails, things should continue to work, but if you have a custom rom setup additional actions are required.</p>

<p>This was an important change that resulted in a cleaner API, removed complex logic that used to rely on <code>inheritance</code> hooks to automatically register components and reduced the amount of global state that ROM relies on.</p>

<p>We kept convenience in mind though and introduced a feature that uses dir/file structure to infer components and register them automatically but without the complexity of relying on <code>inheritance</code> hooks.</p>

<p>Here&rsquo;s an example of a step-by-step setup with explicit registration:</p>
<pre class="highlight ruby"><code><span class="c1"># instead of ROM.setup:</span>
<span class="n">config</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Configuration</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="s1">'postgres://localhost/rom'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">config</span><span class="p">.</span><span class="nf">register_relation</span><span class="p">(</span><span class="no">Users</span><span class="p">)</span>

<span class="c1"># creates rom container with registered components</span>
<span class="n">container</span> <span class="o">=</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</code></pre>

<p>Here&rsquo;s an example of a setup that infers components from dir/file names:</p>
<pre class="highlight ruby"><code><span class="n">config</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Configuration</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="s1">'postgres://localhost/rom'</span><span class="p">)</span>

<span class="c1"># configure auto-registration by providing root path to your components</span>
<span class="c1"># namespacing is turned off</span>
<span class="n">config</span><span class="p">.</span><span class="nf">auto_registration</span><span class="p">(</span><span class="s2">"/path/to/components"</span><span class="p">,</span> <span class="ss">namespace: </span><span class="kp">false</span><span class="p">)</span>

<span class="c1"># assuming there's `/path/to/components/relations/users.rb`</span>
<span class="c1"># which defines `Users` relation class it will be automatically registered</span>

<span class="c1"># creates rom container with registered components</span>
<span class="n">container</span> <span class="o">=</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</code></pre>

<p>You can also use auto-registration with namespaces, which is turned on by default:</p>
<pre class="highlight ruby"><code><span class="n">config</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Configuration</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="s1">'postgres://localhost/rom'</span><span class="p">)</span>

<span class="c1"># configure auto-registration by providing root path to your components</span>
<span class="c1"># namespacing is turned on by default</span>
<span class="n">config</span><span class="p">.</span><span class="nf">auto_registration</span><span class="p">(</span><span class="s2">"/path/to/components"</span><span class="p">)</span>

<span class="c1"># assuming there's `/path/to/components/relations/users.rb`</span>
<span class="c1"># which defines `Relations::Users` class it will be automatically registered</span>

<span class="c1"># creates rom container with registered components</span>
<span class="n">container</span> <span class="o">=</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</code></pre>

<p>For a quick-start you can use an in-line style setup DSL:</p>
<pre class="highlight ruby"><code><span class="n">rom</span> <span class="o">=</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="s1">'postgres://localhost/rom'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="ss">:macros</span><span class="p">)</span> <span class="c1"># enable in-line component registration</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">def</span> <span class="nf">by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
      <span class="n">where</span><span class="p">(</span><span class="ss">id: </span><span class="nb">id</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">rom</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="c1"># returns registered users relation object</span>
</code></pre>

<h2 id="command-api-improvements">Command API Improvements</h2>

<p>Probably the most noticable improvement/feature is the addition of the command graph DSL. The command graph was introduced in 0.9.0 and it allowed you to compose a single command that will be able to persist data coming in a nested structure, similar to <code>nested_attributes_for</code> in ActiveRecord, but more flexible.</p>

<p>This release introduces support for <code>update</code> and <code>delete</code> commands in the graph as well as a new DSL for graph definitions. Here&rsquo;s an example:</p>
<pre class="highlight ruby"><code><span class="c1"># assuming `rom` is your rom container and you have `create` commands</span>
<span class="c1"># for :users and :books relations</span>
<span class="n">command</span> <span class="o">=</span> <span class="n">rom</span><span class="p">.</span><span class="nf">command</span> <span class="c1"># returns command builder</span>

<span class="c1"># define a command that will persist user data with its book data</span>
<span class="n">create_command</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">user: :users</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:books</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># call it with a nested input</span>
<span class="n">create_command</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span>
  <span class="ss">user: </span><span class="p">{</span>
    <span class="ss">name: </span><span class="s2">"Jane"</span><span class="p">,</span>
    <span class="ss">books: </span><span class="p">[{</span> <span class="ss">title: </span><span class="s2">"Book 1"</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">title: </span><span class="s2">"Book 2"</span> <span class="p">}]</span>
  <span class="p">}</span>
<span class="p">)</span>
</code></pre>

<p>It also supports <code>update</code> (<code>delete</code> works in the same way):</p>
<pre class="highlight ruby"><code><span class="c1"># assuming `rom` is your rom container and you have `update` commands</span>
<span class="c1"># for :users and :books relations</span>
<span class="n">command</span> <span class="o">=</span> <span class="n">rom</span><span class="p">.</span><span class="nf">command</span> <span class="c1"># returns command builder</span>

<span class="c1"># define a command that will restrict user by its id and update it</span>
<span class="n">user_update</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="nf">restrict</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">users</span><span class="p">,</span> <span class="n">user</span><span class="o">|</span> <span class="n">users</span><span class="p">.</span><span class="nf">by_id</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span> <span class="p">}</span>

<span class="n">update_command</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="ss">user: </span><span class="n">user_update</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="c1"># define an inner update command for books</span>
  <span class="n">books_update</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">restrict</span><span class="p">(</span><span class="ss">:books</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">books</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">book</span><span class="o">|</span>
    <span class="n">books</span><span class="p">.</span><span class="nf">by_user</span><span class="p">(</span><span class="n">user</span><span class="p">).</span><span class="nf">by_id</span><span class="p">(</span><span class="n">book</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="n">user</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="ss">books: </span><span class="n">books_update</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># call it with a nested input</span>
<span class="n">update_command</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span>
  <span class="ss">user: </span><span class="p">{</span>
    <span class="ss">id: </span><span class="mi">1</span><span class="p">,</span>
    <span class="ss">name: </span><span class="s2">"Jane Doe"</span><span class="p">,</span>
    <span class="ss">books: </span><span class="p">[{</span> <span class="ss">id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">title: </span><span class="s2">"Book 1"</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">id: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">title: </span><span class="s2">"Book 2"</span> <span class="p">}]</span>
  <span class="p">}</span>
<span class="p">)</span>
</code></pre>

<p>As a bonus, you are free to use all types of commands in the same graph and have complete freedom in defining how specific relations must be restricted for a given command.</p>

<h3 id="new-command-result-api">New Command Result API</h3>

<p>Starting from 1.0.0 you can check whether a command result was successful or not:</p>
<pre class="highlight ruby"><code><span class="n">create_command</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">user: :users</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">:books</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">create_command</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span>
  <span class="ss">user: </span><span class="p">{</span>
    <span class="ss">name: </span><span class="s2">"Jane"</span><span class="p">,</span>
    <span class="ss">books: </span><span class="p">[{</span> <span class="ss">title: </span><span class="s2">"Book 1"</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">title: </span><span class="s2">"Book 2"</span> <span class="p">}]</span>
  <span class="p">}</span>
<span class="p">)</span>

<span class="n">result</span><span class="p">.</span><span class="nf">success?</span> <span class="c1"># true if everything went fine, false otherwise</span>
<span class="n">result</span><span class="p">.</span><span class="nf">failure?</span> <span class="c1"># true if it failed, false otherwise</span>
</code></pre>

<h2 id="relation-api-extensions">Relation API Extensions</h2>

<p>Early version of rom-repository introduced a couple of plugins that now have become part of the core rom gem. They are opt-in and the adapter developers must decide whether or not it makes sense to enable them for adapter relations.</p>

<h3 id="view">View</h3>

<p>Relation <code>view</code> plugin is a DSL for defining relation views with an explicit header definition. It is typically useful for reusable relation projections that you can easily compose together in repositories.</p>

<p>Here&rsquo;s a simple example:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">view</span><span class="p">(</span><span class="ss">:listing</span><span class="p">,</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">])</span> <span class="k">do</span> <span class="o">|*</span><span class="n">order_args</span><span class="o">|</span>
    <span class="nb">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">).</span><span class="nf">order</span><span class="p">(</span><span class="o">*</span><span class="n">order_args</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">rom</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">).</span><span class="nf">listing</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:id</span><span class="p">)</span>
</code></pre>

<p>This plugin plays major role in relation composition as it defines the header up-front, which allows repositories to generate mappers automatically, which is very convenient. It is also a nice way of specifying re-usable relation projections which some times may indicate where using an actual database view (assuming your db supports it) could simplify your queries.</p>

<h3 id="key-inference">Key Inference</h3>

<p>This simple plugin provides default value for a foreign-key in a relation. It is used for generating relation views used for composition in the repositories.</p>

<p>You can use it too:</p>
<pre class="highlight ruby"><code><span class="n">rom</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">).</span><span class="nf">foreign_key</span> <span class="c1"># =&gt; `:user_id`</span>
</code></pre>

<h3 id="defining-default-datasets">Defining Default Datasets</h3>

<p>It is now possible to not only specify the name of a relation dataset, but also configure it using a block, when you do that your relation will be initialized with whatever that blocks returns, it is executed in the context of the dataset object:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">dataset</span><span class="p">(</span><span class="ss">:people</span><span class="p">)</span> <span class="k">do</span>
    <span class="nb">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">).</span><span class="nf">order</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>

<h3 id="mapper-extension">Mapper Extension</h3>

<p>There&rsquo;s one new feature in the mapper DSL where you can map values from multiple attributes into a new attribute:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">MyMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">attribute</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">from: </span><span class="p">[</span><span class="ss">:city</span><span class="p">,</span> <span class="ss">:street</span><span class="p">,</span> <span class="ss">:zipcode</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">city</span><span class="p">,</span> <span class="n">street</span><span class="p">,</span> <span class="n">zipcode</span><span class="o">|</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">city</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">street</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">zipcode</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>

<h2 id="release-plan">Release Plan</h2>

<p>Please try out the beta releases and provide feedback. Once we are sure that it works for everybody we&rsquo;ll be able to push the first RC and hopefully follow-up with the final 1.0.0 release shortly after the RC. Other gems that are now released as betas will be bumped to final versions and depend on rom 1.0.0 final.</p>

<p>The final release also means a major update of <a href="http://rom-rb.org">rom-rb.org</a> along with a new set of documentation, guides and tutorials. This is still a work in progress and needs help, please <a href="https://gitter.im/rom-rb/chat">get in touch</a> if you&rsquo;re interested in helping out.</p>

<p>Once rom 1.0.0 is out there will be major focus on rom-sql and rom-repository. There&rsquo;s a plan to <a href="https://github.com/rom-rb/rom-sql/issues/48">improve query DSL</a> in rom-sql and provide full CRUD interface for repositories that should be handy for simple applications.</p>

<p>If you see any issues, please report them in the individual issue trackers on Github or main <a href="https://github.com/rom-rb/rom/issues">rom</a> if you are not sure which gem it relates to.</p>
]]>
    </content>
  </entry>
  <entry>
    <title>ROM 0.9.0 Released</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2015/08/19/rom-0-9-0-released"/>
    <id>http://rom-rb.org/blog/2015/08/19/rom-0-9-0-released</id>
    <published>2015-08-19T02:00:00+02:00</published>
    <updated>2015-08-19T02:00:00+02:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>We are pleased to announce the release of ROM 0.9.0! This is a big release which focuses on internal clean-up in the core library as a preparation for 1.0.0. For those of you hungry for new features - you won&rsquo;t be disappointed. As part of this release we are introducing new adapters, new gems extracted from rom and the long awaited high-level interface for ROM called rom-repository.</p>

<p>For notes about upgrading to ROM 0.9.0 please refer to <a href="https://github.com/rom-rb/rom/wiki/Upgrade-Guides">Upgrade Guides</a>.</p>

<p>Gem updates summary:</p>

<ul>
<li>rom 0.9.0 <a href="https://github.com/rom-rb/rom/blob/master/CHANGELOG.md#v090-2015-08-19">CHANGELOG</a></li>
<li>rom-sql 0.6.0 <a href="https://github.com/rom-rb/rom-sql/blob/master/CHANGELOG.md#v060-2015-08-19">CHANGELOG</a></li>
<li>rom-yaml 0.2.0 <a href="https://github.com/rom-rb/rom-yaml/blob/master/CHANGELOG.md#v020-2015-08-19">CHANGELOG</a></li>
<li>rom-csv 0.2.0 <a href="https://github.com/rom-rb/rom-csv/blob/master/CHANGELOG.md#v020-2015-08-19">CHANGELOG</a></li>
<li>rom-rails 0.5.0 <a href="https://github.com/rom-rb/rom-rails/blob/master/CHANGELOG.md#v050-2015-08-19">CHANGELOG</a></li>
<li>rom-lotus 0.2.0 <a href="https://github.com/rom-rb/rom-lotus/blob/master/CHANGELOG.md#v020-2015-08-19">CHANGELOG</a></li>
<li>rom-roda 0.2.0 <a href="https://github.com/rom-rb/rom-roda/blob/master/CHANGELOG.md#v020-2015-08-19">CHANGELOG</a></li>
</ul>

<p>New gems:</p>

<ul>
<li><a href="https://github.com/rom-rb/rom-repository">rom-repository</a> 0.1.0 - a higher-level interface with auto-mapping and additional relation plugins</li>
<li><a href="https://github.com/rom-rb/rom-mapper">rom-mapper</a> 0.1.1 - standalone mapper objects extracted from rom</li>
<li><a href="https://github.com/rom-rb/rom-model">rom-model</a> 0.1.1 - extracted from rom-rails, includes <code>Attributes</code> and <code>Validator</code> extensions</li>
<li><a href="https://github.com/rom-rb/rom-support">rom-support</a> 0.1.0 - a bunch of small extensions reused across all rom gems</li>
</ul>

<p>New adapters:</p>

<ul>
<li><a href="https://github.com/rom-rb/rom-couchdb">rom-couchdb</a> - an adapter for CouchDB</li>
<li><a href="http://github.com/rom-rb/rom-http">rom-http</a> - an abstract HTTP adapter useful for implementing concrete adapters for HTTP APIs</li>
<li><a href="http://github.com/rom-rb/rom-rethinkdb">rom-rethinkdb</a> - an adapter for RethinkDB</li>
</ul>

<h2 id="repository">Repository</h2>

<p>Probably the most significant addition coming with this release is rom-repository. Using lower-level APIs and configuring mappers manually is tedious in most of the cases that&rsquo;s why Repository was introduced.</p>

<p>Repository interface is very simple and built on top of Relation and Mapper API. It allows you to easily work with relations and have results automatically mapped to struct-like objects. There are a couple of neat plugins that ship with this gem which make relation composition ridiculously simple.</p>

<p>Repositories work <em>with all adapters</em> which means you can combine data from different data sources.</p>

<p>Here&rsquo;s an example repository class:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">UserRepository</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">relations</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:tasks</span>

  <span class="k">def</span> <span class="nf">with_tasks</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">users</span><span class="p">.</span><span class="nf">by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">).</span><span class="nf">combine_children</span><span class="p">(</span><span class="ss">many: </span><span class="n">tasks</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">user_repo</span><span class="p">.</span><span class="nf">with_tasks</span><span class="p">.</span><span class="nf">to_a</span>
<span class="c1"># [#&lt;ROM::Struct[User] id=1 name="Jane" tasks=[#&lt;ROM::Struct[Task] id=2 user_id=1 title="Jane Task"&gt;]&gt;, #&lt;ROM::Struct[User] id=2 name="Joe" tasks=[#&lt;ROM::Struct[Task] id=1 user_id=2 title="Joe Task"&gt;]&gt;]</span>
</code></pre>

<p>Please refer to <a href="http://rom-rb.org/guides/basics/repositories/">Repository Guide</a> for the rationale and more information.</p>

<h2 id="multi-environment-support">Multi-Environment Support</h2>

<p>Initially, ROM supported its setup process through a global environment object. This was a good start that worked well with frameworks like Rails that expect globally accessible objects; however, we&rsquo;re pushing towards removing global state as much as possible.</p>

<p>For that reason in ROM 0.9.0 you can configure the environment as a standalone object, which comes with the benefit of being able to have more than one environment. Why would you want to have many environments? For example for database sharding, or separating components within your application where data comes from different sources and you want to keep them isolated.</p>

<p>Here&rsquo;s an example of a multi-environment setup:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">Persistence</span><span class="o">::</span><span class="no">Command</span><span class="o">::</span><span class="no">CreateUser</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Create</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">relation</span> <span class="ss">:users</span>
  <span class="n">register_as</span> <span class="ss">:create</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Persistence</span><span class="o">::</span><span class="no">Query</span><span class="o">::</span><span class="no">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">dataset</span> <span class="ss">:users</span>
<span class="k">end</span>

<span class="n">command_env</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Environment</span><span class="p">.</span><span class="nf">new</span>

<span class="n">command_env</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="p">[</span><span class="ss">:postgres</span><span class="p">,</span> <span class="s1">'postgres://command_host/my_db'</span><span class="p">)</span>
<span class="n">command_env</span><span class="p">.</span><span class="nf">register_relation</span><span class="p">(</span><span class="no">Persistence</span><span class="o">::</span><span class="no">Command</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">)</span>

<span class="n">command_container</span> <span class="o">=</span> <span class="n">command_env</span><span class="p">.</span><span class="nf">finalize</span><span class="p">.</span><span class="nf">env</span>

<span class="n">command_container</span><span class="p">.</span><span class="nf">command</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="c1"># access to defined commands</span>

<span class="n">query_env</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Environment</span><span class="p">.</span><span class="nf">new</span>

<span class="n">query_env</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="p">[</span><span class="ss">:postgres</span><span class="p">,</span> <span class="s1">'postgres://query_host/my_db'</span><span class="p">)</span>
<span class="n">query_env</span><span class="p">.</span><span class="nf">register_relation</span><span class="p">(</span><span class="no">Persistence</span><span class="o">::</span><span class="no">Query</span><span class="o">::</span><span class="no">Users</span><span class="p">)</span>

<span class="n">query_container</span> <span class="o">=</span> <span class="n">query_env</span><span class="p">.</span><span class="nf">finalize</span><span class="p">.</span><span class="nf">env</span>

<span class="n">query_container</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="c1"># access to defined relations</span>
</code></pre>

<p>Global setup process still works, but please refer to <a href="https://github.com/rom-rb/rom/wiki/Upgrade-Guides">upgrade guide</a> if you are using ROM standalone without any framework integration.</p>

<h2 id="gateway-configuration-support">Gateway Configuration Support</h2>

<p>A new interface for configuring individual adapter gateways has been added. For now the only customization you can make is configuring how relation inferrence should work:</p>
<pre class="highlight ruby"><code><span class="c1"># disable inferring relations from schema</span>
<span class="no">ROM</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="p">[</span>
  <span class="ss">:postgres</span><span class="p">,</span> <span class="s1">'postgres://localhost/db'</span><span class="p">,</span> <span class="ss">infer_relations: </span><span class="kp">false</span>
<span class="p">])</span>

<span class="c1"># cherry-pick which relations should be inferred</span>
<span class="no">ROM</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="p">[</span>
  <span class="ss">:postgres</span><span class="p">,</span> <span class="s1">'postgres://localhost/db'</span><span class="p">,</span> <span class="ss">inferrable_relations: </span><span class="p">[</span><span class="ss">:users</span><span class="p">,</span> <span class="ss">:tasks</span><span class="p">]</span>
<span class="p">])</span>

<span class="c1"># disallow inferrence for specific relations</span>
<span class="no">ROM</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="p">[</span>
  <span class="ss">:postgres</span><span class="p">,</span> <span class="s1">'postgres://localhost/db'</span><span class="p">,</span> <span class="ss">not_inferrable_relations: </span><span class="p">[</span><span class="ss">:some_table</span><span class="p">]</span>
<span class="p">])</span>
</code></pre>

<p>This feature is useful when you have a big database and you don&rsquo;t want to use ROM to deal with all of your relations.</p>

<h2 id="extracted-standalone-mappers">Extracted Standalone Mappers</h2>

<p>You can now install rom-mapper as a standalone gem and use the powerful mapping DSL:</p>
<pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'rom-mapper'</span>

<span class="k">class</span> <span class="nc">PostMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">attribute</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">from: </span><span class="s1">'post_title'</span>

  <span class="n">wrap</span> <span class="ss">:author</span> <span class="k">do</span>
    <span class="n">attribute</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">from: </span><span class="s1">'post_author'</span>
    <span class="n">attribute</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">from: </span><span class="s1">'post_author_email'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">post_mapper</span> <span class="o">=</span> <span class="no">PostMapper</span><span class="p">.</span><span class="nf">build</span>

<span class="n">post_mapper</span><span class="p">.</span><span class="nf">call</span><span class="p">([</span>
<span class="p">{</span> <span class="s1">'post_title'</span> <span class="o">=&gt;</span> <span class="s1">'Hello World'</span><span class="p">,</span> <span class="s1">'post_author'</span> <span class="o">=&gt;</span> <span class="s1">'Jane'</span><span class="p">,</span> <span class="s1">'post_author_email'</span> <span class="o">=&gt;</span> <span class="s1">'jane@doe.org'</span> <span class="p">}</span>
<span class="p">])</span>
<span class="c1"># [{:title=&gt;"Hello World", :author=&gt;{:name=&gt;"Jane", :email=&gt;"jane@doe.org"}}]</span>
</code></pre>

<p>Mappers are very powerful, make sure to check out the <a href="http://rom-rb.org/guides/basics/mappers/">Mapper Guides</a>.</p>

<h2 id="all-relations-are-lazy">All Relations Are Lazy</h2>

<p>Before 0.9.0, ROM had a separate layer for decorating your relations with a lazy-proxy wrapper. This has caused some confusion and unnecessary complexity, as the relations you defined were not the same thing that the <code>#relation()</code> method returned. It also turned out that implementing rom-repository was more difficult than it should have been.</p>

<p>That&rsquo;s why in ROM 0.9.0 all relations have lazy interface. It means that every relation method you define is auto-curried:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">by_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="n">where</span><span class="p">(</span><span class="ss">name: </span><span class="nb">name</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># assuming your container is called `rom`</span>

<span class="n">users</span> <span class="o">=</span> <span class="n">rom</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span>

<span class="n">user_by_name</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="nf">by_name</span> <span class="c1"># returns auto-curried relation</span>

<span class="n">user_by_name</span><span class="p">[</span><span class="s1">'Jane'</span><span class="p">].</span><span class="nf">one!</span> <span class="c1"># call later on to apply the required argument</span>
</code></pre>

<h2 id="adapter-query-dsl-is-public">Adapter Query DSL is Public</h2>

<p>Starting from ROM 0.9.0, the query interface exposed by individual adapters is public, <strong>but</strong> it is not recommended to use it directly in your application. Relations should be used to encapsulate data access properly and query DSLs should not leak to the application layer.</p>
<pre class="highlight ruby"><code><span class="c1"># this is considered as a smell</span>
<span class="n">users</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Jane"</span><span class="p">)</span>

<span class="c1"># that's the proper way™</span>
<span class="n">users</span><span class="p">.</span><span class="nf">by_name</span><span class="p">(</span><span class="s2">"Jane"</span><span class="p">)</span>
</code></pre>

<h2 id="extracted-model-extensions">Extracted Model Extensions</h2>

<p>A couple of useful extensions have been extracted from the rom-rails gem into rom-model. These are standalone components that are based on Virtus and ActiveModel. We have an ambitious plan to rewrite it in the future on top of more powerful tools. Please refer to rom-model <a href="https://github.com/rom-rb/rom-model#rommodel">README</a> for more information.</p>

<p>Right now you can use <code>Attributes</code> and enhanced <code>Validator</code> objects with nice support for embedded validations:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">AuthorInput</span>
  <span class="kp">include</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Model</span><span class="o">::</span><span class="no">Attributes</span>

  <span class="n">attribute</span> <span class="ss">:name</span><span class="p">,</span> <span class="no">String</span>
  <span class="n">attribute</span> <span class="ss">:email</span><span class="p">,</span> <span class="no">String</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostInput</span>
  <span class="kp">include</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Model</span><span class="o">::</span><span class="no">Attributes</span>

  <span class="n">attribute</span> <span class="ss">:title</span><span class="p">,</span> <span class="no">String</span>
  <span class="n">attribute</span> <span class="ss">:author</span><span class="p">,</span> <span class="no">AuthorInput</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostValidator</span>
  <span class="kp">include</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Model</span><span class="o">::</span><span class="no">Validator</span>

  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>

  <span class="n">embedded</span> <span class="ss">:author</span> <span class="k">do</span>
    <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">input</span> <span class="o">=</span> <span class="no">PostInput</span><span class="p">[{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">author: </span><span class="p">{</span> <span class="ss">name: </span><span class="s1">'Jane'</span><span class="p">,</span> <span class="ss">email: </span><span class="s1">'jane@doe.org'</span> <span class="p">}</span> <span class="p">}]</span>

<span class="n">validator</span> <span class="o">=</span> <span class="no">PostValidator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
<span class="n">validator</span><span class="p">.</span><span class="nf">valid?</span>
</code></pre>

<h2 id="http-adapter">HTTP Adapter</h2>

<p>The new, abstract <code>rom-http</code> adapter is a fantastic addition to the growing list of ROM adapters. It gives you a solid foundation for building a custom adapter which needs to talk via HTTP protocol. It&rsquo;s pretty flexible, and works like any other rom adapter - which means that you can use either the lower-level relation and mapping APIs or set it up with <code>rom-repository</code> and auto-mapping.</p>
<pre class="highlight ruby"><code><span class="nb">require</span> <span class="s1">'json'</span>
<span class="nb">require</span> <span class="s1">'http'</span>

<span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:http</span><span class="p">]</span>
  <span class="n">dataset</span> <span class="ss">:users</span>

  <span class="k">def</span> <span class="nf">by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">with_path</span><span class="p">(</span><span class="nb">id</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">rom</span> <span class="o">=</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Environment</span><span class="p">.</span><span class="nf">new</span>

<span class="n">rom</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:http</span><span class="p">,</span> <span class="p">{</span>
  <span class="ss">uri: </span><span class="s1">'http://jsonplaceholder.typicode.com'</span><span class="p">,</span>
  <span class="ss">request_handler: </span><span class="o">-&gt;</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="p">{</span>
    <span class="no">HTTP</span><span class="p">.</span><span class="nf">headers</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="nf">headers</span><span class="p">).</span><span class="nf">public_send</span><span class="p">(</span>
      <span class="n">dataset</span><span class="p">.</span><span class="nf">request_method</span><span class="p">,</span>
      <span class="s2">"</span><span class="si">#{</span><span class="n">dataset</span><span class="p">.</span><span class="nf">uri</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dataset</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dataset</span><span class="p">.</span><span class="nf">path</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
      <span class="ss">params: </span><span class="n">dataset</span><span class="p">.</span><span class="nf">params</span>
    <span class="p">)</span>
  <span class="p">},</span>
  <span class="ss">response_handler: </span><span class="o">-&gt;</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">dataset</span><span class="p">)</span> <span class="p">{</span>
    <span class="no">Array</span><span class="p">([</span><span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)]).</span><span class="nf">flatten</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="n">rom</span><span class="p">.</span><span class="nf">register_relation</span><span class="p">(</span><span class="no">Users</span><span class="p">)</span>

<span class="n">container</span> <span class="o">=</span> <span class="n">rom</span><span class="p">.</span><span class="nf">finalize</span><span class="p">.</span><span class="nf">env</span>

<span class="n">container</span><span class="p">.</span><span class="nf">relation</span><span class="p">(</span><span class="ss">:users</span><span class="p">).</span><span class="nf">by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">to_a</span>
<span class="c1"># =&gt; GET http://jsonplaceholder.typicode.com/users/1 [ Accept: application/json ]</span>
</code></pre>

<h2 id="support-campaign">Support Campaign</h2>

<p>As announced <a href="https://github.com/rom-rb/rom-model#rommodel">a couple of weeks ago</a>, we&rsquo;re running a campaign for <a href="http://salt.bountysource.com/teams/rom-rb">sustainable development</a>. We already have people who&rsquo;ve decided to donate - thank you <strong>so much</strong> for your support.</p>

<p>With ROM 0.9.0 we&rsquo;re close to the first stable 1.0.0 release, but there&rsquo;s still a lot to be done. Please consider supporting this great effort.</p>

<p>Please also remember that ROM is a project open for contributions and currently we have 24 repositories under our GitHub organization. There are many adapters looking for maintainers, there are many smaller tasks to do in core libraries, framework integrations and other extensions. Please get in touch if you&rsquo;re interested in contributing &lt;3.</p>

<h2 id="reporting-issues-and-support">Reporting Issues and Support</h2>

<p>All repositories now have their own issue trackers enabled on GitHub. If you find a bug, or have problems using ROM, please report an issue for a specific project. If you&rsquo;re not sure which project it relates to, just report it in the main <a href="https://github.com/rom-rb/rom/issues">rom issue tracker</a>, and we&rsquo;ll move it to the right place if needed.</p>

<p>For any random questions and support requests you can talk to us on <a href="http://gitter.im/rom-rb/chat">gitter</a>.</p>

<p><s>Last but not least - we&rsquo;re looking for help in setting up a Discourse instance on DigitalOcean to make it simpler for people to discuss things as an alternative to gitter.</s></p>

<p>We&rsquo;ve got <a href="http://discuss.rom-rb.org">a discourse</a> instance up and running :)</p>

<h2 id="rom-1-0-0-see-you-at-rossconf">ROM 1.0.0 - See You at ROSSConf!</h2>

<p>In case you missed it, ROM is part of the second edition of <a href="http://www.rossconf.io/event/berlin/">ROSSConf in Berlin</a>, where you&rsquo;ll have a chance to contribute to the project. We have a crazy plan to release 1.0.0 during the event or at least close all the remaining issues and get an RC out of the door. :)</p>

<p>We&rsquo;ll be working on the list of issues scheduled for 1.0.0, thus it is important to get as much feedback as possible from <strong>you</strong>.</p>

<p>Please try out ROM 0.9.0. Let us know your thoughts. Report issues, ideas, comments, anything that can help in specifying what should be done for 1.0.0 will be grately appreciated.</p>

<p>Thanks! &lt;3</p>
]]>
    </content>
  </entry>
  <entry>
    <title>Sustainable Development Campaign</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2015/08/04/sustainable-development-campaign"/>
    <id>http://rom-rb.org/blog/2015/08/04/sustainable-development-campaign</id>
    <published>2015-08-04T02:00:00+02:00</published>
    <updated>2015-08-04T02:00:00+02:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>ROM has been in development for a couple of years already, in fact, its <a href="https://github.com/solnic/rom-relation/tree/pre-mapper-extraction">early prototype</a> was built in 2012, and has gone through multiple phases before the final architecture was introduced in October last year. This has been a huge effort which resulted in the creation of many smaller libraries and, of course, ROM itself.</p>

<p>One of the main reasons that this project was started was to discover a better way of writing Ruby code that would result in a cleaner architecture for the systems we&rsquo;re building. The Ruby ecosystem has mostly been shaped by the Active Record pattern introduced in the Rails framework, but ROM tries to move away from the common approach, so that it&rsquo;s easier to build <strong>and grow</strong> systems built in Ruby.</p>

<p>It&rsquo;s been an interesting journey with lots of experimentation, and we are getting there, as ROM is approaching 1.0.0.</p>

<p>There are a few mind-shifting aspects of ROM which are worth consideration as general programming guidelines in Ruby:</p>

<ul>
<li>Prefer simple objects that don&rsquo;t change (mutate) and have a single purpose to exist</li>
<li>Prefer interfaces that have no side-effects</li>
<li>Embrace simple data structures rather than complicated objects that mix data and behavior</li>
<li>Prefer objects over classes, and always treat dependencies explicitly</li>
<li>Pay attention to boundaries and proper separation of concerns</li>
</ul>

<p>Those guideliness have led to the decision that ROM will not be a typical Object Relational Mapper which tries to hide your database behind walls of complicated and leaky abstractions and pretend that &ldquo;you can just use objects&rdquo;. This is the reason why ROM gives you a powerful interface to use your database effectively; which can be levaraged to design your systems with simpler data structures in mind and decouple your application layer from persistence concerns.</p>

<p>Such an approach has a significant impact on <strong>lowering complexity</strong> of your application layer.</p>

<h2 id="growing-the-ecosystem">Growing The Ecosystem</h2>

<p>ROM is already a big project; if you consider its lower level libraries, over 14 adapters and integration with 3 frameworks. But it goes beyond that - other libraries are being developed that are based the on same programming principles. It is absolutely amazing to see that happening. The ecosystem is growing.</p>

<p>We have reached a point where ROM needs a sustainable pace of development, so that following things can happen:</p>

<ul>
<li>Reach 1.0.0 in September</li>
<li>Extract re-usable APIs into separate libraries so that other projects can benefit from them</li>
<li>Improve existing adapters to be production-ready (the more the merrier)</li>
<li>Address all known issues in a timely fashion</li>
<li>Support users in multiple channels</li>
<li>Establish a solid release process with a CI setup that can help in developing adapters and extensions</li>
</ul>

<p>In order to be able to do all of that we need your support.</p>

<h2 id="campaign-on-bountysource">Campaign on Bountysource</h2>

<p>Bountysource is a service that helps in raising funds for Open Source projects. Its latest feature, called Salt, allows sustainable fundraising on a monthly basis. This makes it possible to support a steady pace of development - which is crucial for a complex project like ROM.</p>

<p>If you&rsquo;d like to see ROM grow faster, please consider supporting the project through <a href="https://salt.bountysource.com/teams/rom-rb">the campaign</a>.</p>

<p>We want to take the project to the next level with this campaign and hope to expand the team so that more people can work continuously on ROM. We are happy to use the funds to sponsor work on ROM itself and also on any other library that the project could benefit from.</p>

<h2 id="what-39-s-in-it-for-you">What&rsquo;s in it for you?</h2>

<p>There are many ways in which you and your company can benefit from ROM <em>today</em>, but there&rsquo;s still a lot to be done to make ROM simpler to use for the common application use-case. This includes adding convenient, high-level abstractions as well as providing great documentation and other resources that would teach people how to use ROM.</p>

<p>If you&rsquo;re interested in the project but it still feels &ldquo;weird&rdquo; or &ldquo;too complicated&rdquo;, this is exactly the reason that the campaign was started. ROM <em>should be accessible for everybody</em>, including less experienced developers. Not only do we want to promote ROM, but also, the general approach to writing Ruby code, which we believe results in a better and more maintainable code-base.</p>

<p>For any questions or concerns, please do not hesitate to <a href="https://twitter.com/_solnic_">get in touch</a>.</p>
]]>
    </content>
  </entry>
  <entry>
    <title>ROM 0.8.0 Released</title>
    <link rel="alternate" href="http://rom-rb.org/blog/2015/06/22/rom-0-8-0-released"/>
    <id>http://rom-rb.org/blog/2015/06/22/rom-0-8-0-released</id>
    <published>2015-06-22T02:00:00+02:00</published>
    <updated>2015-06-22T02:00:00+02:00</updated>
    <author>
      <name>Piotr Solnica</name>
    </author>
    <content type="html">
      <![CDATA[<p>We&rsquo;re very happy to announce the release of Ruby Object Mapper 0.8.0. This release ships with the support for nested input for commands and many improvements in mappers. You can look at <a href="https://github.com/rom-rb/rom/blob/master/CHANGELOG.md#v070-2015-06-22">the changelog</a> for the full overview.</p>

<p>Apart from ROM 0.8.0 release there are also updates of the following gems:</p>

<ul>
<li>rom-sql 0.5.2 which comes with improved migration tasks that no longer require env finalization <a href="https://github.com/rom-rb/rom-sql/blob/master/CHANGELOG.md#v070-2015-06-22">CHANGELOG</a></li>
<li>rom-rails 0.4.0 with the support for embedded validators <a href="https://github.com/rom-rb/rom-rails/blob/master/CHANGELOG.md#v070-2015-06-22">CHANGELOG</a></li>
</ul>

<p>There are 2 new adapters added to the rom-rb organization so check them out:</p>

<ul>
<li><a href="https://github.com/rom-rb/rom-couchdb">rom-couchdb</a></li>
<li><a href="https://github.com/rom-rb/rom-git">rom-git</a></li>
</ul>

<h2 id="support-for-nested-input">Support For Nested Input</h2>

<p>ROM commands are now even more powerful by allowing composition of multiple commands into one that can receive a nested input which will be used to insert data into multiple relations. This feature is compatible with combined relation mapping which means you can pipe results from a combined command through mappers just like in case of combined relations.</p>

<p>When do you want to use this feature? Every time you want to persist entire object graph, in example a post with its tags or a user with an address.</p>

<p>Here&rsquo;s a complete example of using combined commands with a mapper:</p>
<pre class="highlight ruby"><code><span class="no">ROM</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="s1">'postgres://localhost/rom'</span><span class="p">)</span>

<span class="no">ROM</span><span class="o">::</span><span class="no">SQL</span><span class="p">.</span><span class="nf">gateway</span><span class="p">.</span><span class="nf">connection</span><span class="p">.</span><span class="nf">create_table</span> <span class="ss">:posts</span> <span class="k">do</span>
  <span class="n">primary_key</span> <span class="ss">:id</span>
  <span class="n">column</span> <span class="ss">:title</span><span class="p">,</span> <span class="no">String</span>
<span class="k">end</span>

<span class="no">ROM</span><span class="o">::</span><span class="no">SQL</span><span class="p">.</span><span class="nf">gateway</span><span class="p">.</span><span class="nf">connection</span><span class="p">.</span><span class="nf">create_table</span> <span class="ss">:tags</span> <span class="k">do</span>
  <span class="n">primary_key</span> <span class="ss">:id</span>
  <span class="n">foreign_key</span> <span class="ss">:post_id</span><span class="p">,</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
  <span class="n">column</span> <span class="ss">:name</span><span class="p">,</span> <span class="no">String</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Posts</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tags</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CreatePost</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Create</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">relation</span> <span class="ss">:posts</span>
  <span class="n">result</span> <span class="ss">:one</span>
  <span class="n">register_as</span> <span class="ss">:create</span>
  <span class="n">input</span> <span class="no">Transproc</span><span class="p">(</span><span class="ss">:accept_keys</span><span class="p">,</span> <span class="p">[</span><span class="ss">:title</span><span class="p">])</span> <span class="c1"># filters out `:tags` key</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CreateTag</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Create</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
  <span class="n">relation</span> <span class="ss">:tags</span>
  <span class="n">register_as</span> <span class="ss">:create</span>
  <span class="n">input</span> <span class="no">Transproc</span><span class="p">(</span><span class="ss">:accept_keys</span><span class="p">,</span> <span class="p">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:post_id</span><span class="p">])</span>
  <span class="n">associates</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">key: </span><span class="p">[</span><span class="ss">:post_id</span><span class="p">,</span> <span class="ss">:id</span><span class="p">]</span> <span class="c1"># automatically sets FK value</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">relation</span> <span class="ss">:posts</span>
  <span class="n">register_as</span> <span class="ss">:entity</span>

  <span class="n">combine</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">on: </span><span class="p">{</span> <span class="ss">id: :post_id</span> <span class="p">}</span>
<span class="k">end</span>

<span class="n">rom</span> <span class="o">=</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">finalize</span><span class="p">.</span><span class="nf">env</span>

<span class="n">create_post_with_tags</span> <span class="o">=</span> <span class="n">rom</span>
  <span class="p">.</span><span class="nf">command</span><span class="p">([{</span> <span class="ss">post: :posts</span> <span class="p">},</span> <span class="p">[</span><span class="ss">:create</span><span class="p">,</span> <span class="p">[</span><span class="ss">:tags</span><span class="p">,</span> <span class="p">[</span><span class="ss">:create</span><span class="p">]]]])</span>
  <span class="p">.</span><span class="nf">as</span><span class="p">(</span><span class="ss">:entity</span><span class="p">)</span>

<span class="n">create_post_with_tags</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span>
  <span class="ss">post: </span><span class="p">{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">tags: </span><span class="p">[{</span> <span class="ss">name: </span><span class="s1">'red'</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">name: </span><span class="s1">'green'</span> <span class="p">}]</span> <span class="p">}</span>
<span class="p">).</span><span class="nf">to_a</span>
<span class="c1"># [</span>
<span class="c1">#   {</span>
<span class="c1">#     :id =&gt; 1,</span>
<span class="c1">#     :title =&gt; "Hello World",</span>
<span class="c1">#     :tags =&gt; [</span>
<span class="c1">#       { :id=&gt;1, :post_id=&gt;1, :name=&gt;"red" },</span>
<span class="c1">#       { :id=&gt;2, :post_id=&gt;1, :name=&gt;"green" }</span>
<span class="c1">#      ]</span>
<span class="c1">#   }</span>
<span class="c1"># ]</span>
</code></pre>

<h2 id="mapper-steps">Mapper Steps</h2>

<p>Transforming data with mappers can be really complex and sometimes you may want to define multiple mapping steps. That&rsquo;s why we introduced a new interface in Mapper DSL where you can do just that:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">UserMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">step</span> <span class="k">do</span>
    <span class="n">attribute</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">from: :user_id</span>
    <span class="n">attribute</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">from: :user_name</span>
  <span class="k">end</span>

  <span class="n">step</span> <span class="k">do</span>
    <span class="n">wrap</span> <span class="ss">:details</span> <span class="k">do</span>
      <span class="n">attribute</span> <span class="ss">:name</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">UserMapper</span><span class="p">.</span><span class="nf">build</span>

<span class="n">mapper</span><span class="p">.</span><span class="nf">call</span><span class="p">([{</span> <span class="ss">user_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">user_name: </span><span class="s1">'Jane'</span> <span class="p">}])</span>
<span class="c1"># [{ :id =&gt; 1, :details =&gt; { :name =&gt; "Jane" } }]</span>
</code></pre>

<p>Typically you want to use this feature when mapping logic is too complex to be expressed using nested blocks. It&rsquo;s especially useful when dealing with multiple group/ungroup/wrap/unwrap/fold/unfold operations that simply cannot be defined as a deeply nested mapping definition block.</p>

<h2 id="new-mapping-transformations">New Mapping Transformations</h2>

<p>We have 3 new transformations <code>fold</code>, <code>unfold</code> and <code>ungroup</code> which makes mappers even more powerful.</p>

<p>Folding can be used to collapse values from multiple tuples under a single array attribute:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">PostFoldMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">fold</span> <span class="ss">tag_list: </span><span class="p">[</span><span class="ss">:tag_name</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">PostFoldMapper</span><span class="p">.</span><span class="nf">build</span>

<span class="nb">puts</span> <span class="n">mapper</span><span class="p">.</span><span class="nf">call</span><span class="p">([</span>
  <span class="p">{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">tag_name: </span><span class="s1">'red'</span> <span class="p">},</span>
  <span class="p">{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">tag_name: </span><span class="s1">'green'</span> <span class="p">}</span>
<span class="p">]).</span><span class="nf">inspect</span>
<span class="c1"># [{:title=&gt;"Hello World", :tag_list=&gt;["red", "green"]}]</span>
</code></pre>

<p>Unfolding is, unsurprisingly, an inversion of folding:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">PostUnfoldMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">unfold</span> <span class="ss">:tag_name</span><span class="p">,</span> <span class="ss">from: :tag_list</span>
<span class="k">end</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">PostUnfoldMapper</span><span class="p">.</span><span class="nf">build</span>

<span class="nb">puts</span> <span class="n">mapper</span><span class="p">.</span><span class="nf">call</span><span class="p">([{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">tag_list: </span><span class="p">[</span><span class="s1">'red'</span><span class="p">,</span> <span class="s1">'green'</span><span class="p">]</span> <span class="p">}]).</span><span class="nf">inspect</span>
<span class="c1"># [{:tag_name=&gt;"red", :title=&gt;"Hello World"}, {:tag_name=&gt;"green", :title=&gt;"Hello World"}]</span>
</code></pre>

<p>Now you can also ungroup tuples:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">PostUngroupMapper</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Mapper</span>
  <span class="n">ungroup</span> <span class="ss">:tags</span> <span class="k">do</span>
    <span class="n">attribute</span> <span class="ss">:tag_name</span><span class="p">,</span> <span class="ss">from: :name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="no">PostUngroupMapper</span><span class="p">.</span><span class="nf">build</span>

<span class="nb">puts</span> <span class="n">mapper</span><span class="p">.</span><span class="nf">call</span><span class="p">([</span>
  <span class="p">{</span> <span class="ss">title: </span><span class="s1">'Hello World'</span><span class="p">,</span> <span class="ss">tags: </span><span class="p">[{</span> <span class="ss">name: </span><span class="s1">'red'</span> <span class="p">},</span> <span class="p">{</span> <span class="ss">name: </span><span class="s1">'green'</span> <span class="p">}]</span> <span class="p">}</span>
<span class="p">]).</span><span class="nf">inspect</span>
<span class="c1"># [{:tag_name=&gt;"red", :title=&gt;"Hello World"}, {:tag_name=&gt;"green", :title=&gt;"Hello World"}]</span>
</code></pre>

<h2 id="guides">Guides</h2>

<p>ROM is growing really fast and there&rsquo;s a lot of functionality that is difficult to describe in API documentation. That&rsquo;s why we started a new <a href="http://rom-rb.org/guides">Guides</a> section on the official rom-rb.org website.</p>

<p>You can already find a lot of information about ROM setup, adapters, relations, commands and mappers. We&rsquo;ll be adding more content and improving existing documentation based on the feedback so please check them out and let us know what you think.</p>

<p>In the upcoming weeks you should also see new tutorials covering topics like building your own persistence layer with ROM, handling data import with ROM or how to use ROM with various JSON serializers like Roar or Yaks, so stay tuned!</p>

<h2 id="next-release">Next Release</h2>

<p>We have a pretty good understanding of what we want to achieve with the next 0.9.0 release which will improve the internal architecture of ROM. We&rsquo;re planning to split <code>rom</code> gem into <a href="https://github.com/rom-rb/rom/issues/256">smaller pieces</a> and introduce cleaner and more explicit interfaces for setting up ROM.</p>

<p>Another planned change is introducing <a href="https://github.com/rom-rb/rom/issues/193">Policy Over Configuration</a> API which should improve ROM configuration and handling various conventions.</p>

<p>This release will be a big step towards 1.0.0 which is scheduled for September (yes, this year ;)).</p>
]]>
    </content>
  </entry>
</feed>
